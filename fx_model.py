{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12933412,"sourceType":"datasetVersion","datasetId":8184269},{"sourceId":12933437,"sourceType":"datasetVersion","datasetId":8184286}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\n\n# Define project root\nproject_root = \"/kaggle/working/forex_yield_project\"\n\n# Define subfolders\nfolders = [\n    \"data/raw\",        # raw datasets (gold, yield, macro, etc.)\n    \"data/processed\",  # cleaned and transformed datasets\n    \"notebooks\",       # Jupyter/Colab notebooks\n    \"scripts\",         # reusable python scripts\n    \"models\",          # trained model files\n    \"results\",         # evaluation metrics, reports, plots\n    \"logs\"             # training logs\n]\n\n# Create folders\nfor folder in folders:\n    path = os.path.join(project_root, folder)\n    os.makedirs(path, exist_ok=True)\n\nprint(f\"ðŸ“‚ Project structure created at {project_root}\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-04T11:03:04.522832Z","iopub.execute_input":"2025-09-04T11:03:04.523163Z","iopub.status.idle":"2025-09-04T11:03:04.533230Z","shell.execute_reply.started":"2025-09-04T11:03:04.523130Z","shell.execute_reply":"2025-09-04T11:03:04.532497Z"}},"outputs":[{"name":"stdout","text":"ðŸ“‚ Project structure created at /kaggle/working/forex_yield_project\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"import shutil\n\n# Paths to your Kaggle input datasets\ngold_data_src = \"/kaggle/input/weekly-data/XAU_1w_data.csv\"\nyield_data_src = \"/kaggle/input/yield-of-10-years-data/DGS10.csv\"\n\n# Destination paths in our new project structure\ngold_data_dest = \"/kaggle/working/forex_yield_project/data/raw/XAU_1w_data.csv\"\nyield_data_dest = \"/kaggle/working/forex_yield_project/data/raw/DGS10.csv\"\n\n# Copy files\nshutil.copy(gold_data_src, gold_data_dest)\nshutil.copy(yield_data_src, yield_data_dest)\n\nprint(\"âœ… Files copied to data/raw/\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T11:03:17.112643Z","iopub.execute_input":"2025-09-04T11:03:17.112944Z","iopub.status.idle":"2025-09-04T11:03:17.134969Z","shell.execute_reply.started":"2025-09-04T11:03:17.112920Z","shell.execute_reply":"2025-09-04T11:03:17.134123Z"}},"outputs":[{"name":"stdout","text":"âœ… Files copied to data/raw/\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import pandas as pd\n\n# Paths in the new folder structure\ngold_path = \"/kaggle/working/forex_yield_project/data/raw/XAU_1w_data.csv\"\nyield_path = \"/kaggle/working/forex_yield_project/data/raw/DGS10.csv\"\n\n# Load datasets\ngold_df = pd.read_csv(gold_path)\nyield_df = pd.read_csv(yield_path)\n\n# Display info\nprint(\"ðŸ“Š Gold Weekly Data:\")\nprint(gold_df.head(), \"\\n\")\nprint(gold_df.info(), \"\\n\")\n\nprint(\"ðŸ“Š 10-Year Yield Data:\")\nprint(yield_df.head(), \"\\n\")\nprint(yield_df.info())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T11:03:24.005256Z","iopub.execute_input":"2025-09-04T11:03:24.005559Z","iopub.status.idle":"2025-09-04T11:03:24.377739Z","shell.execute_reply.started":"2025-09-04T11:03:24.005536Z","shell.execute_reply":"2025-09-04T11:03:24.376846Z"}},"outputs":[{"name":"stdout","text":"ðŸ“Š Gold Weekly Data:\n                 Date;Open;High;Low;Close;Volume\n0     2004.06.06 00:00;384;384.8;382.8;384.1;272\n1  2004.06.13 00:00;384.3;395.8;381.1;394.3;9692\n2  2004.06.20 00:00;394.3;402.8;392.1;401.1;8509\n3  2004.06.27 00:00;401.8;404.6;390.3;397.8;9682\n4  2004.07.04 00:00;397.8;408.6;388.5;407.1;3507 \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1102 entries, 0 to 1101\nData columns (total 1 columns):\n #   Column                           Non-Null Count  Dtype \n---  ------                           --------------  ----- \n 0   Date;Open;High;Low;Close;Volume  1102 non-null   object\ndtypes: object(1)\nmemory usage: 8.7+ KB\nNone \n\nðŸ“Š 10-Year Yield Data:\n  observation_date  DGS10\n0       2015-08-28   2.19\n1       2015-08-31   2.21\n2       2015-09-01   2.17\n3       2015-09-02   2.20\n4       2015-09-03   2.18 \n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2610 entries, 0 to 2609\nData columns (total 2 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   observation_date  2610 non-null   object \n 1   DGS10             2500 non-null   float64\ndtypes: float64(1), object(1)\nmemory usage: 40.9+ KB\nNone\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# RUN in notebooks/01_data_prep.ipynb (or a code cell)\nimport os\nimport logging\nimport pandas as pd\n\n# ---------- CONFIG ----------\nPROJECT_ROOT = \"/kaggle/working/forex_yield_project\"\nRAW_DIR = os.path.join(PROJECT_ROOT, \"data\", \"raw\")\nPROCESSED_DIR = os.path.join(PROJECT_ROOT, \"data\", \"processed\")\nLOG_DIR = os.path.join(PROJECT_ROOT, \"logs\")\n\nGOLD_RAW = os.path.join(RAW_DIR, \"XAU_1w_data.csv\")  # weekly gold (uploaded)\nYIELD_RAW = os.path.join(RAW_DIR, \"DGS10.csv\")       # daily 10Y yield (uploaded)\n\nOUT_PATH = os.path.join(PROCESSED_DIR, \"gold_with_us10_weekly.csv\")\n\nos.makedirs(PROCESSED_DIR, exist_ok=True)\nos.makedirs(LOG_DIR, exist_ok=True)\n\n# ---------- logging ----------\nlog_path = os.path.join(LOG_DIR, \"prep.log\")\nlogging.basicConfig(filename=log_path, level=logging.INFO,\n                    format=\"%(asctime)s %(levelname)s %(message)s\")\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)\nlogging.getLogger().addHandler(console)\n\nlogging.info(\"Starting data prep: GOLD & US10 merge\")\n\n# ---------- Load & parse gold weekly file ----------\n# The file uses semicolons inside a single column, so read with sep=';'\ntry:\n    gold = pd.read_csv(GOLD_RAW, sep=\";\", engine=\"python\", dtype=str)\nexcept Exception as e:\n    logging.error(f\"Failed to read gold CSV with sep=';': {e}\")\n    raise\n\n# Normalize column names (strip whitespace)\ngold.columns = [c.strip() for c in gold.columns]\n\n# If the reader still created a single column named like \"Date;Open;High;Low;Close;Volume\"\n# attempt a fallback split\nif len(gold.columns) == 1 and \";\" in gold.columns[0]:\n    # break the single column into parts by splitting the header and re-reading\n    raw_header = gold.columns[0]\n    logging.info(\"Detected single-column semicolon CSV; attempting fallback split.\")\n    gold = pd.read_csv(GOLD_RAW, sep=\";\", engine=\"python\")\n\n# Expected columns: Date, Open, High, Low, Close, Volume\nexpected = [\"Date\", \"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]\n# If header names are different casing / punctuation, do a robust rename:\ncol_map = {}\nfor c in gold.columns:\n    lc = c.lower()\n    if \"date\" in lc:\n        col_map[c] = \"Date\"\n    elif \"open\" in lc:\n        col_map[c] = \"Open\"\n    elif \"high\" in lc:\n        col_map[c] = \"High\"\n    elif \"low\" in lc:\n        col_map[c] = \"Low\"\n    elif \"close\" in lc:\n        col_map[c] = \"Close\"\n    elif \"volume\" in lc:\n        col_map[c] = \"Volume\"\ngold = gold.rename(columns=col_map)\n\nmissing = [c for c in expected if c not in gold.columns]\nif missing:\n    logging.error(f\"Gold CSV missing columns after parsing: {missing}\")\n    raise ValueError(f\"Gold CSV missing columns: {missing}\")\n\n# Parse Date. Sample shows format like \"2004.06.06 00:00\" -> format '%Y.%m.%d %H:%M'\ngold['Date'] = pd.to_datetime(gold['Date'], format=\"%Y.%m.%d %H:%M\", errors=\"coerce\")\nif gold['Date'].isnull().any():\n    # try a more flexible parse if strict format fails\n    logging.warning(\"Some Date parsing failed with strict format; trying flexible parse.\")\n    gold['Date'] = pd.to_datetime(gold['Date'].astype(str), errors=\"coerce\")\n\n# set index, sort\ngold = gold.dropna(subset=['Date']).set_index('Date').sort_index()\n\n# cast numeric columns\nfor col in [\"Open\", \"High\", \"Low\", \"Close\", \"Volume\"]:\n    gold[col] = pd.to_numeric(gold[col], errors=\"coerce\")\n\nlogging.info(f\"Gold loaded: shape={gold.shape}; date range: {gold.index.min()} to {gold.index.max()}\")\nlogging.info(f\"Gold nulls:\\n{gold.isnull().sum()}\")\n\n# ---------- Load & clean 10Y yield ----------\ntry:\n    us10 = pd.read_csv(YIELD_RAW, parse_dates=['observation_date'], dayfirst=False)\nexcept Exception:\n    # fallback if different column name\n    us10 = pd.read_csv(YIELD_RAW)\n\n# Normalize column names\nus10.columns = [c.strip() for c in us10.columns]\n# find date column\ndate_col = None\nfor c in us10.columns:\n    if \"date\" in c.lower():\n        date_col = c\n        break\nif date_col is None:\n    raise ValueError(\"Could not find date column in US10 CSV\")\n\n# find yield column (DGS10 or similar)\nyield_col = None\nfor c in us10.columns:\n    if \"dgs10\" in c.lower() or \"10\" in c.lower() and \"rate\" in c.lower():\n        yield_col = c\n        break\n# fallback to second column if typical naming\nif yield_col is None and len(us10.columns) >= 2:\n    yield_col = [c for c in us10.columns if c != date_col][0]\n\nus10 = us10.rename(columns={date_col: \"Date\", yield_col: \"US10Y\"})\nus10['Date'] = pd.to_datetime(us10['Date'], errors='coerce')\nus10 = us10.dropna(subset=['Date']).set_index('Date').sort_index()\nus10['US10Y'] = pd.to_numeric(us10['US10Y'], errors='coerce')\n\nlogging.info(f\"US10 loaded: shape={us10.shape}; date range: {us10.index.min()} to {us10.index.max()}\")\nlogging.info(f\"US10 nulls before fill: {us10.isnull().sum().to_dict()}\")\n\n# Fill missing yields sensibly (forward fill then backfill)\nus10['US10Y'] = us10['US10Y'].ffill().bfill()\n\nlogging.info(f\"US10 nulls after fill: {us10.isnull().sum().to_dict()}\")\n\n# ---------- Resample US10 to weekly frequency (Friday) ----------\n# We choose W-FRI to align with typical weekly closes. We take the last observed yield in the week.\nus10_weekly = us10.resample('W-FRI').last().dropna()\n\nlogging.info(f\"US10 weekly resampled: shape={us10_weekly.shape}; date range: {us10_weekly.index.min()} to {us10_weekly.index.max()}\")\n\n# ---------- Align date ranges & merge ----------\n# The gold weekly index likely already contains Fridays or week-anchored dates.\n# We'll reindex/resample gold to ensure its index is weekly on Fridays as well (if needed).\n# First check gold freq; if irregular, resample by taking last value in week.\ngold_weekly = gold.copy()\n# if index isn't exactly weekly, make weekly by taking last valid Close per Friday\ngold_weekly = gold_weekly.resample('W-FRI').last().dropna()\n\nlogging.info(f\"Gold resampled to weekly: shape={gold_weekly.shape}; date range: {gold_weekly.index.min()} to {gold_weekly.index.max()}\")\n\n# Merge on weekly index (inner to keep weeks present in gold; you can change to left/right as desired)\nmerged = gold_weekly.merge(us10_weekly, left_index=True, right_index=True, how='left')\n\n# If there are still NaNs in US10Y (e.g., for early periods), forward-fill them so features exist\nmerged['US10Y'] = merged['US10Y'].ffill().bfill()\n\n# Optionally create a yield lag and yield return for features\nmerged['US10Y_ret'] = merged['US10Y'].pct_change()\nmerged['US10Y_lag1'] = merged['US10Y'].shift(1)\n\n# Save merged dataset\nmerged.to_csv(OUT_PATH, index_label=\"Date\")\nlogging.info(f\"Saved merged processed file to: {OUT_PATH}\")\nlogging.info(f\"Merged shape: {merged.shape}\")\nlogging.info(f\"Merged null counts:\\n{merged.isnull().sum().to_dict()}\")\n\n# Print quick previews to console (not just log)\nprint(\"\\n--- GOLD weekly (head) ---\")\nprint(gold_weekly.head())\nprint(\"\\n--- US10 weekly (head) ---\")\nprint(us10_weekly.head())\nprint(\"\\n--- MERGED (head) ---\")\nprint(merged.head())\nprint(\"\\nSaved merged file to:\", OUT_PATH)\nprint(\"Logfile:\", log_path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T11:03:28.964928Z","iopub.execute_input":"2025-09-04T11:03:28.965277Z","iopub.status.idle":"2025-09-04T11:03:29.102202Z","shell.execute_reply.started":"2025-09-04T11:03:28.965251Z","shell.execute_reply":"2025-09-04T11:03:29.101354Z"}},"outputs":[{"name":"stderr","text":"Starting data prep: GOLD & US10 merge\nGold loaded: shape=(1102, 5); date range: 2004-06-06 00:00:00 to 2025-07-13 00:00:00\nGold nulls:\nOpen      0\nHigh      0\nLow       0\nClose     0\nVolume    0\ndtype: int64\nUS10 loaded: shape=(2610, 1); date range: 2015-08-28 00:00:00 to 2025-08-28 00:00:00\nUS10 nulls before fill: {'US10Y': 110}\nUS10 nulls after fill: {'US10Y': 0}\nUS10 weekly resampled: shape=(523, 1); date range: 2015-08-28 00:00:00 to 2025-08-29 00:00:00\nGold resampled to weekly: shape=(1102, 5); date range: 2004-06-11 00:00:00 to 2025-07-18 00:00:00\nSaved merged processed file to: /kaggle/working/forex_yield_project/data/processed/gold_with_us10_weekly.csv\nMerged shape: (1102, 8)\nMerged null counts:\n{'Open': 0, 'High': 0, 'Low': 0, 'Close': 0, 'Volume': 0, 'US10Y': 0, 'US10Y_ret': 1, 'US10Y_lag1': 1}\n","output_type":"stream"},{"name":"stdout","text":"\n--- GOLD weekly (head) ---\n             Open   High    Low  Close  Volume\nDate                                          \n2004-06-11  384.0  384.8  382.8  384.1     272\n2004-06-18  384.3  395.8  381.1  394.3    9692\n2004-06-25  394.3  402.8  392.1  401.1    8509\n2004-07-02  401.8  404.6  390.3  397.8    9682\n2004-07-09  397.8  408.6  388.5  407.1    3507\n\n--- US10 weekly (head) ---\n            US10Y\nDate             \n2015-08-28   2.19\n2015-09-04   2.13\n2015-09-11   2.20\n2015-09-18   2.13\n2015-09-25   2.17\n\n--- MERGED (head) ---\n             Open   High    Low  Close  Volume  US10Y  US10Y_ret  US10Y_lag1\nDate                                                                        \n2004-06-11  384.0  384.8  382.8  384.1     272   2.19        NaN         NaN\n2004-06-18  384.3  395.8  381.1  394.3    9692   2.19        0.0        2.19\n2004-06-25  394.3  402.8  392.1  401.1    8509   2.19        0.0        2.19\n2004-07-02  401.8  404.6  390.3  397.8    9682   2.19        0.0        2.19\n2004-07-09  397.8  408.6  388.5  407.1    3507   2.19        0.0        2.19\n\nSaved merged file to: /kaggle/working/forex_yield_project/data/processed/gold_with_us10_weekly.csv\nLogfile: /kaggle/working/forex_yield_project/logs/prep.log\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"Feature Engineering","metadata":{}},{"cell_type":"code","source":"# notebooks/02_features_and_baseline.ipynb\n# Paste and run this cell\n\nimport os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit, cross_val_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score, roc_auc_score, classification_report, confusion_matrix\nimport joblib\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\n\n# ---------------- CONFIG ----------------\nPROJECT_ROOT = \"/kaggle/working/forex_yield_project\"\nPROC_IN = os.path.join(PROJECT_ROOT, \"data\", \"processed\", \"gold_with_us10_weekly.csv\")\nPROCESSED_OUT = os.path.join(PROJECT_ROOT, \"data\", \"processed\", \"gold_features_with_strategy_weekly.csv\")\nMODEL_DIR = os.path.join(PROJECT_ROOT, \"models\")\nos.makedirs(MODEL_DIR, exist_ok=True)\n\n# ---------------- LOAD merged weekly dataset ----------------\ndf = pd.read_csv(PROC_IN, parse_dates=[\"Date\"], index_col=\"Date\")\nprint(\"Loaded merged file:\", PROC_IN)\nprint(\"Initial shape:\", df.shape)\ndisplay(df.head())\n\n# ---------------- FEATURE ENGINEERING ----------------\n# 1) Price returns + moving averages (these are commonly useful)\ndf['Return'] = df['Close'].pct_change()\ndf['MA4'] = df['Close'].rolling(window=4).mean()     # 4-week MA (~monthly)\ndf['MA12'] = df['Close'].rolling(window=12).mean()   # 12-week MA (~quarterly)\ndf['MA26'] = df['Close'].rolling(window=26).mean()   # 26-week MA (~half year)\n\n# 2) Volatility (rolling std of returns)\ndf['Volatility'] = df['Return'].rolling(window=12).std()\n\n# 3) RSI (14) using EWM smoothing to be numerically stable\ndef compute_rsi(series, window=14):\n    delta = series.diff()\n    up = delta.clip(lower=0)\n    down = -delta.clip(upper=0)\n    roll_up = up.ewm(alpha=1/window, adjust=False).mean()\n    roll_down = down.ewm(alpha=1/window, adjust=False).mean()\n    rs = roll_up / roll_down.replace(0, 1e-9)\n    return 100 - (100 / (1 + rs))\n\ndf['RSI14'] = compute_rsi(df['Close'], window=14)\n\n# 4) MACD (fast/slow/emma signal)\nema12 = df['Close'].ewm(span=12, adjust=False).mean()\nema26 = df['Close'].ewm(span=26, adjust=False).mean()\ndf['MACD'] = ema12 - ema26\ndf['MACD_signal'] = df['MACD'].ewm(span=9, adjust=False).mean()\ndf['MACD_hist'] = df['MACD'] - df['MACD_signal']\n\n# 5) Bollinger band width\ndf['BB_mid'] = df['Close'].rolling(window=20).mean()\ndf['BB_std'] = df['Close'].rolling(window=20).std()\ndf['BB_width'] = (2 * df['BB_std']) / df['BB_mid']    # normalized width\n\n# 6) ATR (approx using weekly highs/lows)\nhigh_low = df['High'] - df['Low']\nhigh_prev = (df['High'] - df['Close'].shift(1)).abs()\nlow_prev  = (df['Low'] - df['Close'].shift(1)).abs()\ntr = pd.concat([high_low, high_prev, low_prev], axis=1).max(axis=1)\ndf['ATR14'] = tr.rolling(window=14).mean()\ndf['ATR_pct'] = df['ATR14'] / df['Close']\n\n# 7) Lag features (past closes)\ndf['Lag1'] = df['Close'].shift(1)\ndf['Lag2'] = df['Close'].shift(2)\ndf['Lag3'] = df['Close'].shift(3)\n\n# 8) Macro lags/returns (from US10Y already merged)\ndf['US10Y_ret'] = df['US10Y'].pct_change()\ndf['US10Y_lag1'] = df['US10Y'].shift(1)\ndf['US10Y_lag4'] = df['US10Y'].shift(4)\n\n# 9) Strategy / flag features (examples)\ndf['MA_cross'] = (df['MA4'] > df['MA12']).astype(int)\ndf['RSI_overb'] = (df['RSI14'] > 70).astype(int)\ndf['RSI_overs'] = (df['RSI14'] < 30).astype(int)\ndf['close_minus_ma12'] = (df['Close'] - df['MA12']) / df['MA12']\n\n# ---------------- TARGET CREATION ----------------\n# next-week close and return -> regression & classification setup\ndf['close_next'] = df['Close'].shift(-1)\ndf['return_next'] = (df['close_next'] - df['Close']) / df['Close']\ndf['direction'] = (df['return_next'] > 0).astype(int)   # 1 if price goes up next week, else 0\n\n# ---------------- CLEAN ----------------\ndf = df.dropna()   # drop rows with NaNs from rolling/leads/lags\nprint(\"After fe/target dropna shape:\", df.shape)\n\n# Save processed features for reproducibility\ndf.to_csv(PROCESSED_OUT, index_label=\"Date\")\nprint(\"Saved processed features to:\", PROCESSED_OUT)\n\n# ---------------- SELECT FEATURES ----------------\n# A reasonable feature set for classification\nfeatures = [\n    'Open','High','Low','Close','Volume',\n    'Return','MA4','MA12','MA26','Volatility',\n    'RSI14','MACD_hist','BB_width','ATR_pct',\n    'Lag1','Lag2','Lag3','MA_cross','RSI_overb','RSI_overs',\n    'close_minus_ma12','US10Y','US10Y_ret','US10Y_lag1','US10Y_lag4'\n]\n\n# Ensure all features exist\nfeatures = [f for f in features if f in df.columns]\nprint(\"Using features:\", features)\n\nX = df[features]\ny_cls = df['direction']        # classification target\ny_reg = df['close_next']       # optional regression target\n\n# ---------------- TRAIN/TEST SPLIT (time-ordered) ----------------\n# Keep latest 20% as holdout test\nn = len(df)\ntrain_n = int(n * 0.8)\nX_train, X_test = X.iloc[:train_n], X.iloc[train_n:]\ny_train_cls, y_test_cls = y_cls.iloc[:train_n], y_cls.iloc[train_n:]\ny_train_reg, y_test_reg = y_reg.iloc[:train_n], y_reg.iloc[train_n:]\nprint(\"Train / Test sizes:\", X_train.shape, X_test.shape)\n\n# ---------------- SCALE features (fit on train only) ----------------\nscaler = MinMaxScaler()\nX_train_scaled = pd.DataFrame(scaler.fit_transform(X_train), index=X_train.index, columns=X_train.columns)\nX_test_scaled  = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n\n# Save scaler for later deployment\njoblib.dump(scaler, os.path.join(MODEL_DIR, \"scaler_minmax.gz\"))\n\n# ---------------- QUICK BASELINE: LightGBM classifier (direction) ----------------\n# Use a lightweight param set to keep runtime reasonable\nclf_params = {\n    \"objective\": \"binary\",\n    \"metric\": \"auc\",\n    \"verbosity\": -1,\n    \"boosting_type\": \"gbdt\",\n    \"n_jobs\": -1,\n    \"learning_rate\": 0.05,\n    \"num_leaves\": 31,\n    \"n_estimators\": 300,\n    \"class_weight\": \"balanced\"  # handle mild imbalance\n}\n\nclf = lgb.LGBMClassifier(**clf_params)\n\n# TimeSeriesSplit evaluation (robustness check)\ntscv = TimeSeriesSplit(n_splits=5)\ncv_auc = cross_val_score(clf, X_train_scaled, y_train_cls, cv=tscv, scoring='roc_auc', n_jobs=-1)\ncv_acc = cross_val_score(clf, X_train_scaled, y_train_cls, cv=tscv, scoring='accuracy', n_jobs=-1)\nprint(\"TimeSeriesSplit CV (AUC) meanÂ±std:\", np.mean(cv_auc), np.std(cv_auc))\nprint(\"TimeSeriesSplit CV (Acc) meanÂ±std:\", np.mean(cv_acc), np.std(cv_acc))\n\n# Fit on full training set\nclf.fit(X_train_scaled, y_train_cls)\n\n# Save classifier\njoblib.dump(clf, os.path.join(MODEL_DIR, \"lgbm_direction_baseline.pkl\"))\nprint(\"Saved classifier to models folder\")\n\n# ---------------- Evaluate on hold-out test ----------------\ny_pred_test = clf.predict(X_test_scaled)\ny_prob_test = clf.predict_proba(X_test_scaled)[:,1] if hasattr(clf, \"predict_proba\") else None\n\nprint(\"\\nClassification report (test):\")\nprint(classification_report(y_test_cls, y_pred_test))\nprint(\"Confusion matrix:\\n\", confusion_matrix(y_test_cls, y_pred_test))\nprint(\"Test accuracy:\", accuracy_score(y_test_cls, y_pred_test))\nif y_prob_test is not None:\n    try:\n        print(\"Test ROC AUC:\", roc_auc_score(y_test_cls, y_prob_test))\n    except Exception as e:\n        print(\"roc_auc_score error:\", e)\n\n# ---------------- Feature importances ----------------\nfi = pd.Series(clf.feature_importances_, index=X_train.columns).sort_values(ascending=False)\nprint(\"\\nTop feature importances:\\n\", fi.head(20))\nplt.figure(figsize=(8,6))\nfi.head(20).plot(kind='barh'); plt.gca().invert_yaxis(); plt.title(\"Feature importance (LightGBM)\"); plt.show()\n\n# ---------------- Simple directional backtest (threshold 0.5) ----------------\n# Use probabilities if available for thresholding\nif y_prob_test is not None:\n    th = 0.5\n    signals = (y_prob_test >= th).astype(int)    # 1 -> go long gold for next week\n    # retrieve closes aligned to test index\n    close_t = df.loc[X_test.index, \"Close\"].values\n    close_next = df.loc[X_test.index, \"close_next\"].values\n    returns = (close_next - close_t) / close_t\n    trades = np.abs(np.diff(signals, prepend=0))\n    tc = 0.0005  # transaction cost (example)\n    strat_returns = signals * returns - trades * tc\n    cum_strat = (1 + strat_returns).cumprod() - 1\n    cum_hold = (1 + returns).cumprod() - 1\n    print(\"Strategy cum return (test):\", cum_strat[-1], \"Buy & Hold cum return (test):\", cum_hold[-1])\n    plt.figure(figsize=(10,4))\n    plt.plot(cum_strat, label=\"Strategy\")\n    plt.plot(cum_hold, label=\"Buy & Hold\")\n    plt.legend(); plt.title(\"Strategy vs Buy & Hold (test)\"); plt.show()\n\nprint(\"\\nDONE: features + baseline model trained. If everything is OK tell me and we'll proceed to:\")\nprint(\"- hyperparameter search (RandomizedSearchCV with TimeSeriesSplit),\")\nprint(\"- a regression baseline for predicting next-week price, and\")\nprint(\"- a small LSTM experiment on weekly sequences if you want a sequence model.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T11:03:51.914764Z","iopub.execute_input":"2025-09-04T11:03:51.915093Z","iopub.status.idle":"2025-09-04T11:10:18.136852Z","shell.execute_reply.started":"2025-09-04T11:03:51.915068Z","shell.execute_reply":"2025-09-04T11:10:18.136072Z"}},"outputs":[{"name":"stdout","text":"Loaded merged file: /kaggle/working/forex_yield_project/data/processed/gold_with_us10_weekly.csv\nInitial shape: (1102, 8)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"             Open   High    Low  Close  Volume  US10Y  US10Y_ret  US10Y_lag1\nDate                                                                        \n2004-06-11  384.0  384.8  382.8  384.1     272   2.19        NaN         NaN\n2004-06-18  384.3  395.8  381.1  394.3    9692   2.19        0.0        2.19\n2004-06-25  394.3  402.8  392.1  401.1    8509   2.19        0.0        2.19\n2004-07-02  401.8  404.6  390.3  397.8    9682   2.19        0.0        2.19\n2004-07-09  397.8  408.6  388.5  407.1    3507   2.19        0.0        2.19","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>US10Y</th>\n      <th>US10Y_ret</th>\n      <th>US10Y_lag1</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2004-06-11</th>\n      <td>384.0</td>\n      <td>384.8</td>\n      <td>382.8</td>\n      <td>384.1</td>\n      <td>272</td>\n      <td>2.19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2004-06-18</th>\n      <td>384.3</td>\n      <td>395.8</td>\n      <td>381.1</td>\n      <td>394.3</td>\n      <td>9692</td>\n      <td>2.19</td>\n      <td>0.0</td>\n      <td>2.19</td>\n    </tr>\n    <tr>\n      <th>2004-06-25</th>\n      <td>394.3</td>\n      <td>402.8</td>\n      <td>392.1</td>\n      <td>401.1</td>\n      <td>8509</td>\n      <td>2.19</td>\n      <td>0.0</td>\n      <td>2.19</td>\n    </tr>\n    <tr>\n      <th>2004-07-02</th>\n      <td>401.8</td>\n      <td>404.6</td>\n      <td>390.3</td>\n      <td>397.8</td>\n      <td>9682</td>\n      <td>2.19</td>\n      <td>0.0</td>\n      <td>2.19</td>\n    </tr>\n    <tr>\n      <th>2004-07-09</th>\n      <td>397.8</td>\n      <td>408.6</td>\n      <td>388.5</td>\n      <td>407.1</td>\n      <td>3507</td>\n      <td>2.19</td>\n      <td>0.0</td>\n      <td>2.19</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"After fe/target dropna shape: (1076, 33)\nSaved processed features to: /kaggle/working/forex_yield_project/data/processed/gold_features_with_strategy_weekly.csv\nUsing features: ['Open', 'High', 'Low', 'Close', 'Volume', 'Return', 'MA4', 'MA12', 'MA26', 'Volatility', 'RSI14', 'MACD_hist', 'BB_width', 'ATR_pct', 'Lag1', 'Lag2', 'Lag3', 'MA_cross', 'RSI_overb', 'RSI_overs', 'close_minus_ma12', 'US10Y', 'US10Y_ret', 'US10Y_lag1', 'US10Y_lag4']\nTrain / Test sizes: (860, 25) (216, 25)\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater_equal\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less_equal\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in less\n  return op(a, b)\n/usr/local/lib/python3.11/dist-packages/pandas/core/computation/expressions.py:73: RuntimeWarning: invalid value encountered in greater\n  return op(a, b)\n","output_type":"stream"},{"name":"stdout","text":"TimeSeriesSplit CV (AUC) meanÂ±std: 0.5193945303992973 0.028574359553419765\nTimeSeriesSplit CV (Acc) meanÂ±std: 0.5034965034965035 0.017691063833109803\nSaved classifier to models folder\n\nClassification report (test):\n              precision    recall  f1-score   support\n\n           0       0.53      0.68      0.59        97\n           1       0.66      0.50      0.57       119\n\n    accuracy                           0.58       216\n   macro avg       0.59      0.59      0.58       216\nweighted avg       0.60      0.58      0.58       216\n\nConfusion matrix:\n [[66 31]\n [59 60]]\nTest accuracy: 0.5833333333333334\nTest ROC AUC: 0.5679632677813393\n\nTop feature importances:\n Return              929\nMACD_hist           865\nBB_width            762\nclose_minus_ma12    719\nRSI14               699\nVolume              653\nVolatility          651\nATR_pct             561\nLag2                410\nUS10Y_ret           394\nLag3                380\nOpen                275\nMA12                256\nMA26                226\nLow                 217\nHigh                204\nMA4                 192\nClose               175\nUS10Y               150\nUS10Y_lag1           93\ndtype: int32\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Strategy cum return (test): 0.9007539067471497 Buy & Hold cum return (test): 0.748268687144672\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nDONE: features + baseline model trained. If everything is OK tell me and we'll proceed to:\n- hyperparameter search (RandomizedSearchCV with TimeSeriesSplit),\n- a regression baseline for predicting next-week price, and\n- a small LSTM experiment on weekly sequences if you want a sequence model.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"Regression Baseline","metadata":{}},{"cell_type":"code","source":"# ===== Regression baseline cell (copy-paste & run) =====\n# Run this CELL after you've uploaded/placed the weekly processed CSV in the notebook.\n# It will create X_train, X_test, y_train_reg, y_test_reg and train a LightGBM regressor.\n\nimport os, sys\nimport numpy as np, pandas as pd\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, accuracy_score\nimport lightgbm as lgb\nimport joblib\nimport matplotlib.pyplot as plt\n\n# Candidate processed files (we'll try each until one exists)\ncandidate_paths = [\n    \"/kaggle/working/forex_yield_project/data/processed/gold_features_with_strategy_weekly.csv\",\n    \"/kaggle/working/forex_yield_project/data/processed/gold_with_us10_weekly.csv\",\n    \"/kaggle/working/FX_model/data/processed/gold_features_with_strategy_weekly.csv\",\n    \"/kaggle/working/FX_model/data/processed/gold_with_us10_weekly.csv\",\n    \"/kaggle/working/FX_model/data/processed/gold_features_with_strategy.csv\",\n    \"/kaggle/working/FX_model/data/processed/gold_with_macro.csv\",\n    \"/kaggle/working/FX_model/data/processed/gold_features_with_strategy_weekly.csv\",\n    \"/kaggle/working/FX_model/data/processed/gold_with_us10_weekly.csv\",\n    \"/kaggle/input/gold-data/gold_features_with_strategy_weekly.csv\",\n    \"/kaggle/input/weekly-data/XAU_1w_data.csv\"\n]\n\ndata_path = None\nfor p in candidate_paths:\n    if os.path.exists(p):\n        data_path = p\n        break\n\nif data_path is None:\n    raise FileNotFoundError(\"Could not find processed weekly CSV. Put it under one of the expected paths or update `candidate_paths`.\")\n\nprint(\"Loading processed file:\", data_path)\ndf = pd.read_csv(data_path, parse_dates=[\"Date\"], index_col=\"Date\", dayfirst=False)\ndf = df.sort_index()\nprint(\"Loaded df shape:\", df.shape)\n\n# Confirm target exists or create it\nif \"return_next\" not in df.columns or \"close_next\" not in df.columns:\n    # try to construct from Close if possible\n    if \"Close\" in df.columns:\n        df[\"close_next\"] = df[\"Close\"].shift(-1)\n        df[\"return_next\"] = (df[\"close_next\"] - df[\"Close\"]) / df[\"Close\"]\n    else:\n        raise RuntimeError(\"No 'Close' found to create 'return_next'. Please ensure processed file has Close column.\")\n\n# drop rows with NaNs created by rolling or target shift\ndf = df.dropna()\nprint(\"After dropna df shape:\", df.shape)\n\n# FEATURES: all numeric columns excluding targets/labels\nexclude = {\"close_next\", \"return_next\", \"direction\"}\nnumeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()\nfeature_cols = [c for c in numeric_cols if c not in exclude]\nprint(\"Using features:\", feature_cols)\n\nX = df[feature_cols].copy()\ny_reg = df[\"return_next\"].copy()   # regression target\n\n# Time-ordered train/test split (80/20)\ntrain_n = int(len(df) * 0.8)\nX_train = X.iloc[:train_n].copy()\nX_test  = X.iloc[train_n:].copy()\ny_train_reg = y_reg.iloc[:train_n].copy()\ny_test_reg  = y_reg.iloc[train_n:].copy()\n\nprint(\"Train / Test sizes:\", X_train.shape, X_test.shape)\n\n# --- LightGBM regression baseline ---\nreg = lgb.LGBMRegressor(\n    n_estimators=300,\n    learning_rate=0.05,\n    max_depth=8,\n    num_leaves=31,\n    n_jobs=-1,\n    random_state=42\n)\n\nprint(\"Training LightGBM regressor...\")\nreg.fit(X_train, y_train_reg)\n\n# Predict\ny_pred_reg = reg.predict(X_test)\n\n# Metrics\nmae = mean_absolute_error(y_test_reg, y_pred_reg)\nrmse = np.sqrt(mean_squared_error(y_test_reg, y_pred_reg))\nprint(f\"Regression baseline (LightGBM) MAE: {mae:.6f}, RMSE: {rmse:.6f}\")\n\n# Directional accuracy derived from regression\ndir_true = (y_test_reg > 0).astype(int)\ndir_pred = (y_pred_reg > 0).astype(int)\ndir_acc = accuracy_score(dir_true, dir_pred)\nprint(f\"Directional accuracy derived from regression: {dir_acc:.4f}\")\n\n# Simple backtest: long when predicted return > 0\n# Need close and close_next aligned for test period\ntry:\n    close_t = df.loc[X_test.index, \"Close\"].values\n    true_next = df.loc[X_test.index, \"close_next\"].values\nexcept Exception:\n    if \"Close\" in X_test.columns:\n        close_t = X_test[\"Close\"].values\n        true_next = close_t * (1 + y_test_reg.values)\n    else:\n        raise RuntimeError(\"Cannot find Close/close_next for backtest in df or X_test.\")\n\nreturns = (true_next - close_t) / close_t\nsignals = (y_pred_reg > 0).astype(int)\ntrades = np.abs(np.diff(signals, prepend=0))\ntc = 0.0005\nstrat_returns = signals * returns - trades * tc\ncum_strat = (1 + strat_returns).cumprod() - 1\ncum_hold = (1 + returns).cumprod() - 1\n\nplt.figure(figsize=(10,4))\nplt.plot(cum_strat, label=\"Strategy (pred>0)\")\nplt.plot(cum_hold, label=\"Buy & Hold\")\nplt.legend(); plt.title(\"Regression strategy vs Buy & Hold (test)\")\nplt.show()\n\n# Save model and a small diagnostics CSV (optional)\nout_dir = \"/kaggle/working/FX_model/models\"\nos.makedirs(out_dir, exist_ok=True)\nmodel_path = os.path.join(out_dir, \"lgbm_reg_baseline.pkl\")\njoblib.dump(reg, model_path)\nprint(\"Saved reg model to:\", model_path)\n\n# Save predictions for inspection\npred_df = pd.DataFrame({\n    \"close\": close_t,\n    \"true_next\": true_next,\n    \"true_return\": returns,\n    \"pred_return\": y_pred_reg,\n    \"signal\": signals,\n    \"strat_return\": strat_returns\n}, index=X_test.index)\npred_df.to_csv(\"/kaggle/working/FX_model/models/regression_test_preds.csv\")\nprint(\"Saved test predictions to /kaggle/working/FX_model/models/regression_test_preds.csv\")\n\n# Print quick head of preds\nprint(pred_df.head())\n\n# ===== End cell =====\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-04T11:36:44.488228Z","iopub.execute_input":"2025-09-04T11:36:44.488583Z","iopub.status.idle":"2025-09-04T11:36:44.946965Z","shell.execute_reply.started":"2025-09-04T11:36:44.488557Z","shell.execute_reply":"2025-09-04T11:36:44.946086Z"}},"outputs":[{"name":"stdout","text":"Loading processed file: /kaggle/working/forex_yield_project/data/processed/gold_features_with_strategy_weekly.csv\nLoaded df shape: (1076, 33)\nAfter dropna df shape: (1076, 33)\nUsing features: ['Open', 'High', 'Low', 'Close', 'Volume', 'US10Y', 'US10Y_ret', 'US10Y_lag1', 'Return', 'MA4', 'MA12', 'MA26', 'Volatility', 'RSI14', 'MACD', 'MACD_signal', 'MACD_hist', 'BB_mid', 'BB_std', 'BB_width', 'ATR14', 'ATR_pct', 'Lag1', 'Lag2', 'Lag3', 'US10Y_lag4', 'MA_cross', 'RSI_overb', 'RSI_overs', 'close_minus_ma12']\nTrain / Test sizes: (860, 30) (216, 30)\nTraining LightGBM regressor...\nRegression baseline (LightGBM) MAE: 0.016653, RMSE: 0.021788\nDirectional accuracy derived from regression: 0.5093\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x400 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Saved reg model to: /kaggle/working/FX_model/models/lgbm_reg_baseline.pkl\nSaved test predictions to /kaggle/working/FX_model/models/regression_test_preds.csv\n              close  true_next  true_return  pred_return  signal  strat_return\nDate                                                                          \n2021-05-28  1903.18    1891.51    -0.006132     0.009455       1     -0.006632\n2021-06-04  1891.51    1876.16    -0.008115    -0.010888       0     -0.000500\n2021-06-11  1876.16    1764.52    -0.059505    -0.016822       0     -0.000000\n2021-06-18  1764.52    1781.11     0.009402     0.001751       1      0.008902\n2021-06-25  1781.11    1787.33     0.003492    -0.002245       0     -0.000500\n","output_type":"stream"}],"execution_count":7}]}